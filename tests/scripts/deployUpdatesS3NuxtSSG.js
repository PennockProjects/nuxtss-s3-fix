import fs from 'fs';
import { S3Client, GetObjectCommand } from '@aws-sdk/client-s3';

/**
 * Read the JSON file generated by diffSitemapPaths
 * @param {string} inputFile - The path to the JSON file
 * @returns {Object|null} - The parsed JSON object, or null if an error occurs
 */
function readDiffFile(inputFile) {
  try {
    const fileContent = fs.readFileSync(inputFile, 'utf8');
    return JSON.parse(fileContent);
  } catch (error) {
    console.error(`Error reading or parsing file: ${inputFile}`);
    console.error(error.message);
    return null;
  }
}

/**
 * Generate AWS S3 Get Object commands for paths in pathsNotInSitemap2
 * @param {string} bucketName - The name of the S3 bucket
 * @param {Array<string>} paths - The array of paths to generate commands for
 */
async function generateS3GetObjectCommands(bucketName, paths) {
  const s3Client = new S3Client({ region: 'us-west-2' }); // Replace with your region

  for (const path of paths) {
    try {
      const command = new GetObjectCommand({
        Bucket: bucketName,
        Key: path,
      });
      const response = await s3Client.send(command);
      console.log(`Successfully fetched object: ${bucketName}/${path}`);
    } catch (error) {
      console.error(`Error fetching object: ${bucketName}/${path}`);
      console.error(error.message);
    }
  }
}

// Main script execution
const [inputFile, bucketName] = process.argv.slice(2);

if (!inputFile || !bucketName) {
  console.error('Usage: node generateS3GetObjectCommands.js <inputFile> <bucketName>');
  console.error('Parameters:');
  console.error('  <inputFile>  - Path to the JSON file generated by diffSitemapPaths');
  console.error('  <bucketName> - Name of the AWS S3 bucket');
  process.exit(1);
}

// Read the diff file
const diffData = readDiffFile(inputFile);
if (!diffData || !diffData.sitemap1 || !diffData.sitemap1.pathsNotInSitemap2) {
  console.error('Invalid diff file format or missing pathsNotInSitemap2');
  process.exit(1);
}

// Generate S3 Get Object commands
const pathsNotInSitemap2 = diffData.sitemap1.pathsNotInSitemap2;
console.log(`Generating AWS S3 Get Object commands for ${pathsNotInSitemap2.length} paths...`);
generateS3GetObjectCommands(bucketName, pathsNotInSitemap2);